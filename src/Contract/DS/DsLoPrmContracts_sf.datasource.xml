<Datasource name="DsLoPrmContracts" backendSystem="sf" objectClass="LoPrmContracts" businessObjectClass="LoPrmContracts" external="true" editableEntity="Contract__c" schemaVersion="2.0">
  <Database platform="SQLite">
    <Load><![CDATA[
		var newParams = jsonQuery;
		var userPKeys = Utils.isDefined(newParams.referenceUserPKey) ? "'" + newParams.referenceUserPKey + "'" : ApplicationContext.get('user').getTeamList();

      var addCondSearch = ""; 
			var prmText = "";
			var customerName = "";
			var customerPKey = "";
			var phase = "";
			var dateFrom = "";
			var dateThru = "";
			var ownerPKey = "";
			var responsiblePKey = "";

			//############################
			//## Advanced Search Paging ##
			//############################

			/**  Prm Text  */
			if (Utils.isDefined(newParams.prmText)){
              prmText = Utils.convertForDBParam(newParams.prmText, "DomText");
              addCondSearch += " AND Contract__c.Description_#Language#__c " + Utils.replaceOperator(newParams.prmTextComp) + "#prmText# ";        
			} 

			/**  Customer Name  */
			if (Utils.isDefined(newParams.customerName)){
              customerName = Utils.convertForDBParam(newParams.customerName, "DomBpaName");
              addCondSearch += " AND customers.Name " + Utils.replaceOperator(newParams.customerNameComp) + "#customerName# ";        
			}

			/**  Customer PKey  */
			if (Utils.isDefined(newParams.customerPKey)){
              customerPKey = Utils.convertForDBParam(newParams.customerPKey, "DomPKey");
              addCondSearch += " AND Contract__c.Account__c " + Utils.replaceOperator(newParams.customerPKeyComp) + "#customerPKey# ";
			}

			/**  Phase  */
			if (Utils.isDefined(newParams.phase)){
              phase = Utils.convertForDBParam(newParams.phase, "DomPrmPhase");
              addCondSearch += " AND Contract__c.Phase__c " + Utils.replaceOperator(newParams.phaseComp) + "#phase# ";
			}

			/**  Date From  */
			if (Utils.isDefined(newParams.dateFrom)){
              dateFrom = Utils.convertForDBParam(newParams.dateFrom, "DomDate");
              addCondSearch += " AND #compareAsDate('Contract__c.Valid_From__c', 'Date','"+  Utils.replaceOperator(newParams.dateFromComp) +"',#dateFrom#, 'Date')# ";
			}

			/**  Date Thru  */
			if (Utils.isDefined(newParams.dateThru)){
              dateThru = Utils.convertForDBParam(newParams.dateThru, "DomDate");
              addCondSearch += " AND #compareAsDate('Contract__c.Valid_Thru__c', 'Date','"+  Utils.replaceOperator(newParams.dateThruComp) +"',#dateThru#, 'Date')# ";
			}

			/**  Owner PKey  */
			if (Utils.isDefined(newParams.ownerPKey)){
              ownerPKey = Utils.convertForDBParam(newParams.ownerPKey, "DomPKey");
              addCondSearch += " AND Contract__c.Accountable__c " + Utils.replaceOperator(newParams.ownerPKeyComp) + "#ownerPKey# ";
			}

			/**  Responsible PKey  */
			if (Utils.isDefined(newParams.responsiblePKey)){
              responsiblePKey = Utils.convertForDBParam(newParams.responsiblePKey, "DomPKey");
              addCondSearch += " AND ResponsibleUser.Id " + Utils.replaceOperator(newParams.responsiblePKeyComp) + "#responsiblePKey# ";
			}

			var sqlParams1 = {};
			var sqlParams2 = {prmText, customerName, customerPKey, phase, dateFrom, dateThru, ownerPKey, responsiblePKey};

			var sqlStmt1 = "SELECT Contract__c.Id as pKey, ";
			sqlStmt1 += "        Contract__c.Valid_From__c as dateFrom, ";
			sqlStmt1 += "        Contract__c.Valid_Thru__c as dateThru, ";
			sqlStmt1 += "        Contract__c.Phase__c as phase, ";
			sqlStmt1 += "        Contract__c.Accountable__c as ownerPKey, ";
			sqlStmt1 += "        Contract__c.Description_#Language#__c as prmText, ";
			sqlStmt1 += "        customers.Name as customerName, ";
			sqlStmt1 += "        Contract__c.Account__c as customerPKey, ";
			sqlStmt1 += "        ResponsibleUser.Id as responsiblePKey, ";
			sqlStmt1 += "        ResponsibleUser.LastName || ', ' || ResponsibleUser.FirstName  as responsibleUserName, ";
			sqlStmt1 += "        OwnerUser.LastName || ', ' || OwnerUser.FirstName  as ownerUserName ";
			sqlStmt1 += "  FROM Contract__c  ";
			sqlStmt1 += "  JOIN Contract_Template__c ON Contract__c.Account_Contract_Template__c=Contract_Template__c.Id ";
			sqlStmt1 += "  JOIN RecordType ON Contract_Template__c.RecordTypeId=RecordType.Id ";
			sqlStmt1 += "       AND RecordType.Name = 'Customer Contract Template' ";
			sqlStmt1 += " LEFT JOIN User AS ResponsibleUser ON Contract__c.Responsible__c = ResponsibleUser.Id ";
			sqlStmt1 += " LEFT JOIN User AS OwnerUser ON Contract__c.Accountable__c = OwnerUser.Id ";
			sqlStmt1 += "  JOIN   ";
			sqlStmt1 += "  ( ";
			sqlStmt1 += "   SELECT  ";
			sqlStmt1 += "        C.Id AS pKey , ";
			sqlStmt1 += "        C.Name as name ";
			sqlStmt1 += "              FROM  ";
			sqlStmt1 += "                  Account C ";
			sqlStmt1 +=      "JOIN ";
			sqlStmt1 +=          "User U ";     
			sqlStmt1 +=              "ON (U.Id in ("; 

			//userPKeys
			var userPKeyObj = Utils.getListParams(userPKeys);

			var sqlStmt2 =                             ")"; 
			sqlStmt2 +=                 ")"; 
			sqlStmt2 += "              LEFT OUTER JOIN ";
			sqlStmt2 += "                  Account_Manager__c ";
			sqlStmt2 += "                      ON Account_Manager__c.User__c = U.Id ";
			sqlStmt2 += "                      AND Account_Manager__c.Account__c = C.Id   ";
			sqlStmt2 += "                      AND #compareAsDate('Account_Manager__c.Valid_From__c', 'Date','<=',#TodayAsDate#, 'Date')#   ";
			sqlStmt2 += "                      AND #compareAsDate('Account_Manager__c.Valid_Thru__c', 'Date','>=',#TodayAsDate#, 'Date')# ";
			sqlStmt2 += "                      AND Account_Manager__c.Management_Type__c <> 'Substitution' "; 
			sqlStmt2 += "              LEFT OUTER JOIN ";
			sqlStmt2 += "                  Substitution__c SubBpaRel ";
			sqlStmt2 += "                      ON SubBpaRel.Account__c = C.Id ";
			sqlStmt2 += "                      AND SubBpaRel.Substitute__c = U.Id ";
			sqlStmt2 += "                      AND SubBpaRel.Active__c = '1' ";
			sqlStmt2 += "              LEFT OUTER JOIN ";
			sqlStmt2 += "                  Substitution__c SubMain";
			sqlStmt2 += "                      ON SubMain.Id = SubBpaRel.Substitution__c ";
			sqlStmt2 += "                      AND SubMain.Sales_Org__c = '#SALESORG#' ";
			sqlStmt2 += "                      AND SubMain.Active__c = '1' ";
			sqlStmt2 += "            WHERE ";
			sqlStmt2 += "              (   ";        
			sqlStmt2 += "                  (NOT Account_Manager__c.Id is NULL) ";
			sqlStmt2 += "                   OR SubBpaRel.Valid_From__c - SubMain.Lead_Time__c * 86400 <= #TodayAsDate# ";
			sqlStmt2 += "                   AND SubBpaRel.Valid_Thru__c + SubMain.Follow_Up_Time__c * 86400 >= #TodayAsDate# ";
			sqlStmt2 += "                   AND SubMain.Valid_From__c - SubMain.Lead_Time__c * 86400 <= #TodayAsDate# ";
			sqlStmt2 += "                   AND SubMain.Valid_Thru__c + SubMain.Follow_Up_Time__c * 86400 >= #TodayAsDate# ";
			sqlStmt2 += "                 )       ";
			sqlStmt2 += "            Group by C.Id ";
			sqlStmt2 += "        ) customers ";
			sqlStmt2 += "  WHERE 1=1 ";
			sqlStmt2 += "  AND Contract_Template__c.Sales_Org__c = '#SALESORG#' ";
			sqlStmt2 += "  AND Contract__c.Account__c = customers.pKey ";
			sqlStmt2 += "  AND Contract__c.isDeleted = '0' ";

			sqlStmt2 += addCondSearch;


			var sqlStmt1Result = Utils.replaceMacrosParam(sqlStmt1, sqlParams1);
			var sqlStmt2Result = Utils.replaceMacrosParam(sqlStmt2, sqlParams2);


			var finalSql = sqlStmt1Result.sql + userPKeyObj.sql + sqlStmt2Result.sql;
			var finalParams = sqlStmt1Result.params.concat(userPKeyObj.params).concat(sqlStmt2Result.params);

			return {sql: finalSql, params: finalParams};
		]]></Load>
    <Update><![CDATA[
			// Intended to be empty
			return undefined;]]></Update>
    <Insert><![CDATA[   
			// Intended to be empty     
			return undefined;]]></Insert>
    <Delete><![CDATA[
			// Intended to be empty
			return undefined;]]></Delete>
  </Database>
</Datasource>