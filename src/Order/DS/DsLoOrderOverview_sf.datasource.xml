<Datasource name="DsLoOrderOverview" objectClass="LoOrderOverview" backendSystem="sf" schemaVersion="2.0">
  <Database platform="SQLite">
    <Load><![CDATA[

    var condCallCustomer = "";
 var callCustomerPKey = "";
 var id = "";
    var orderMetaPKey = "";
    var phase = "";
    var commitDate = "";
    var deliveryDate = "";
    var customerPKey = "";
    var initiatorPKey = "";
    var responsiblePKey = "";
    var grossTotalValue = "";
    var condSyncStatus = "";

 if(Utils.isDefined(jsonQuery)){
  var newParams = jsonQuery;
  if (Utils.isOldParamsFormat(newParams)){
   newParams = Utils.convertDsParamsOldToNew(newParams);
  }
 }

    condSyncStatus = " CASE WHEN Order__c._syncStatus = 1 THEN 'OrderAwaitingSync' WHEN Order__c._syncStatus = 2 THEN 'OrderSyncError' WHEN Order__c._syncStatus = 3 THEN 'OrderNotSyncable' ELSE 'EmptyImage' END AS syncStatusIcon, ";


 if(Utils.isDefined(newParams.callCustomerPKey)) {
        callCustomerPKey = Utils.convertForDBParam(newParams.callCustomerPKey, "DomPKey");
        condCallCustomer += " AND Order__c.Order_Account__c = #callCustomerPKey# ";
 }
  //############################
        //## Advanced Search Paging ##
        //############################
        var addCondSearch = "";

        /**  Order ID */
        if (Utils.isDefined(newParams.id)){
          id = Utils.convertForDBParam(newParams.id, "DomId");
      addCondSearch += " AND Order__c.Order_Id__c " + Utils.replaceOperator(newParams.idComp) + "#id# ";
        }

        /**  orderMetaPKey  */
        if (Utils.isDefined(newParams.orderMetaPKey)){
    orderMetaPKey = Utils.convertForDBParam(newParams.orderMetaPKey, "DomPKey");
          addCondSearch += " AND Order__c.Order_Template__c " + Utils.replaceOperator(newParams.orderMetaPKeyComp) + "#orderMetaPKey# ";
        }

        /**  phase  */
        if (Utils.isDefined(newParams.phase)){
    phase = Utils.convertForDBParam(newParams.phase, "DomSdoPhase");
          addCondSearch += " AND Order__c.Phase__c " + Utils.replaceOperator(newParams.phaseComp) + "#phase# ";
        }

        /**  commitDate  */
        if (Utils.isDefined(newParams.commitDate)){
    commitDate =  Utils.convertForDBParam(newParams.commitDate, "DomDate");
          addCondSearch += " AND #compareAsDate('Order__c.Order_Date__c', 'Date','"+ Utils.replaceOperator(newParams.commitDateComp) +"',#commitDate#, 'Date')# ";
        }

        /**  deliveryDate  */
        if (Utils.isDefined(newParams.deliveryDate)){
    deliveryDate = Utils.convertForDBParam(newParams.deliveryDate, "DomDate");
          addCondSearch += " AND #compareAsDate('Order__c.Delivery_Date__c', 'Date','"+ Utils.replaceOperator(newParams.deliveryDateComp) +"',#deliveryDate#, 'Date')# ";
        }

        /**  customerPKey  */
        if (Utils.isDefined(newParams.customerPKey)){
    customerPKey = Utils.convertForDBParam(newParams.customerPKey, "DomPKey");
          addCondSearch += " AND Order__c.Order_Account__c " + Utils.replaceOperator(newParams.customerPKeyComp) + "#customerPKey# ";
        }

        /**  initiatorPKey  */
        if (Utils.isDefined(newParams.initiatorPKey)){
    initiatorPKey = Utils.convertForDBParam(newParams.initiatorPKey, "DomPKey");
          addCondSearch += " AND Order__c.CreatedById " + Utils.replaceOperator(newParams.initiatorPKeyComp) + "#initiatorPKey# ";
        }

        /**  responsiblePKey  */
        if (Utils.isDefined(newParams.responsiblePKey)){
    responsiblePKey = Utils.convertForDBParam(newParams.responsiblePKey, "DomPKey");
          addCondSearch += " AND Order__c.Responsible__c " + Utils.replaceOperator(newParams.responsiblePKeyComp) + "#responsiblePKey# ";
        }

        /**  grossTotalValue  */
        if (Utils.isDefined(newParams.grossTotalValue)){
    grossTotalValue = Utils.convertForDBParam(newParams.grossTotalValue, "DomMoney");
          addCondSearch += " AND Order__c.Gross_Total_Value__c " + Utils.replaceOperator(newParams.grossTotalValueComp) + "#grossTotalValue# ";
        }

  var sqlParams = {callCustomerPKey, id, orderMetaPKey, phase, commitDate, deliveryDate, customerPKey, initiatorPKey, responsiblePKey, grossTotalValue};

    var sqlStmt = "SELECT Order__c.Id AS pKey, ";
    sqlStmt += "Order__c.Order_Id__c AS id, ";
    sqlStmt += "#toggleMapping('Order__c', 'Phase__c')# AS phase, ";
    sqlStmt += "Order__c.Order_Date__c AS commitDate, ";
    sqlStmt += "Order__c.CreatedById AS initiatorPKey, ";
    sqlStmt += "Order__c.Delivery_Date__c AS deliveryDate, ";
    sqlStmt += "Order__c.Responsible__c AS responsiblePKey, "; 
    sqlStmt += "Order__c.Gross_Total_Value__c AS grossTotalValue, ";
    sqlStmt += "Order__c.Payment_Method__c AS paymentMethod, ";
    sqlStmt += "Order__c.Paid_Amount__c AS paidAmount, ";
    sqlStmt += "Order__c.Document_Transaction_Type__c AS docTaType, ";
    sqlStmt += "Account_Extension__c.Payer_Role_Valid_From__c AS payerValidFrom, ";
    sqlStmt += "Account_Extension__c.Payer_Role_Valid_Thru__c AS payerValidThru, ";
    sqlStmt += "Responsible.Name AS responsibleName, ";
    sqlStmt += "Initiator.LastName || ', ' || Initiator.FirstName AS initiatorName, ";
    sqlStmt += "Account.Name AS customerName, ";
    sqlStmt += "Order_Template__c.Deletion_Allowed__c AS deletionAllowed,  ";
    sqlStmt += "Order_Template__c.Description_#Language#__c AS orderType, "; 
    sqlStmt += "Account.Id AS customerPKey,  ";
    sqlStmt += "Order_Template__c.Id As orderMetaPKey,  ";
    sqlStmt += "Order_Template__c.Mobility_Relevant__c AS mobilityRelevant, ";
    sqlStmt += condSyncStatus;
    sqlStmt += "'OrderPhaseImage_'|| #toggleMapping('Order__c', 'Phase__c')# As orderPhaseImage,  ";
    sqlStmt += "Order__c._syncStatus AS syncStatus ";
    sqlStmt += "FROM Order__c, ";
    sqlStmt += "User AS Responsible, ";
    sqlStmt += "User AS Initiator, ";
    sqlStmt += "Account, ";
    sqlStmt += "Order_Template__c ";
    sqlStmt += "LEFT JOIN Account_Extension__c ON Account_Extension__c.Account__c = Order__c.Order_Account__c ";
    sqlStmt += "WHERE Order__c.Responsible__c = Responsible.Id ";
    sqlStmt += "AND Order__c.CreatedById = Initiator.Id ";
    sqlStmt += "AND Order__c.IsDeleted = '0' ";
    sqlStmt += "AND Order__c.Order_Account__c = Account.Id ";
    sqlStmt += "AND Order__c.Responsible__c = '#UserPKey#' ";
    sqlStmt += "AND Order__c.Order_Template__c = Order_Template__c.Id ";

    sqlStmt += condCallCustomer;
    sqlStmt += addCondSearch;

    sqlStmt += " UNION ";

    sqlStmt += "SELECT Order__c.Id AS pKey, ";
    sqlStmt += "Order__c.Order_Id__c AS id, ";
    sqlStmt += "#toggleMapping('Order__c', 'Phase__c')# AS phase, ";
    sqlStmt += "Order__c.Order_Date__c AS commitDate,  ";
    sqlStmt += "Order__c.CreatedById AS initiatorPKey, ";
    sqlStmt += "Order__c.Delivery_Date__c AS deliveryDate, "; 
    sqlStmt += "Order__c.Responsible__c AS responsiblePKey, "; 
    sqlStmt += "Order__c.Gross_Total_Value__c AS grossTotalValue, ";
    sqlStmt += "Order__c.Payment_Method__c AS paymentMethod, ";
    sqlStmt += "Order__c.Paid_Amount__c AS paidAmount, ";
    sqlStmt += "Order__c.Document_Transaction_Type__c AS docTaType, ";
    sqlStmt += "Account_Extension__c.Payer_Role_Valid_From__c AS payerValidFrom, ";
    sqlStmt += "Account_Extension__c.Payer_Role_Valid_Thru__c AS payerValidThru, ";
    sqlStmt += "Responsible.Name AS responsibleName, "; 
    sqlStmt += "Initiator.LastName || ', ' || Initiator.FirstName AS initiatorName, ";
    sqlStmt += "Account.Name AS customerName, ";
    sqlStmt += "Order_Template__c.Deletion_Allowed__c AS deletionAllowed, "; 
    sqlStmt += "Order_Template__c.Description_#Language#__c AS orderType, "; 
    sqlStmt += "Account.Id AS customerPKey, "; 
    sqlStmt += "Order_Template__c.Id As orderMetaPKey, "; 
    sqlStmt += "Order_Template__c.Mobility_Relevant__c AS mobilityRelevant, ";
    sqlStmt += condSyncStatus;
    sqlStmt += "'OrderPhaseImage_'|| #toggleMapping('Order__c', 'Phase__c')# As orderPhaseImage,  ";
    sqlStmt += "Order__c._syncStatus AS syncStatus ";
    sqlStmt += "FROM Order__c, ";
    sqlStmt += "User AS Responsible, "; 
    sqlStmt += "User AS Initiator, "; 
    sqlStmt += "Account, "; 
    sqlStmt += "Account_Manager__c, "; 
    sqlStmt += "Order_Template__c ";
    sqlStmt += "LEFT JOIN Account_Extension__c ON Account_Extension__c.Account__c = Order__c.Order_Account__c ";
    sqlStmt += "WHERE Order__c.Responsible__c = Responsible.Id ";
    sqlStmt += "AND Order__c.CreatedById = Initiator.Id ";
    sqlStmt += "AND Order__c.IsDeleted = '0' ";
    sqlStmt += "AND Order__c.Order_Account__c = Account.Id ";
    sqlStmt += "AND Order__c.Order_Account__c = Account_Manager__c.Account__c ";
    sqlStmt += "AND Account_Manager__c.User__c = '#UserPKey#' ";
    sqlStmt += "AND #compareAsDate('Account_Manager__c.Valid_From__c', 'Date','<=',#TodayAsDate#, 'Date')# AND #compareAsDate('Account_Manager__c.Valid_Thru__c', 'Date','>=',#TodayAsDate#, 'Date')# ";
    sqlStmt += "AND Account_Manager__c.Management_Type__c <> 'Substitution' ";
    sqlStmt += "AND Order__c.Order_Template__c = Order_Template__c.Id ";

    sqlStmt += condCallCustomer;
    sqlStmt += addCondSearch;

    sqlStmt += " UNION ";

    sqlStmt += "SELECT Order__c.Id AS pKey, Order__c.Order_Id__c AS id, Order__c.Phase__c AS phase, Order__c.Order_Date__c AS commitDate, Order__c.CreatedById AS initiatorPKey, ";
    sqlStmt += "Order__c.Delivery_Date__c AS deliveryDate, Order__c.Responsible__c AS responsiblePKey, Order__c.Gross_Total_Value__c AS grossTotalValue, ";
    sqlStmt += "Order__c.Payment_Method__c AS paymentMethod, ";
    sqlStmt += "Order__c.Paid_Amount__c AS paidAmount, ";
    sqlStmt += "Order__c.Document_Transaction_Type__c AS docTaType, ";
    sqlStmt += "Account_Extension__c.Payer_Role_Valid_From__c AS payerValidFrom, ";
    sqlStmt += "Account_Extension__c.Payer_Role_Valid_Thru__c AS payerValidThru, ";
    sqlStmt += "Responsible.Name AS responsibleName, Initiator.LastName || ', ' || Initiator.FirstName AS initiatorName, Account.Name AS customerName, ";
    sqlStmt += "Order_Template__c.Deletion_Allowed__c AS deletionAllowed, Order_Template__c.Description_#Language#__c AS orderType, Account.Id AS customerPKey, Order_Template__c.Id As orderMetaPKey, Order_Template__c.Mobility_Relevant__c AS mobilityRelevant, ";
    sqlStmt += condSyncStatus;
    sqlStmt += "'OrderPhaseImage_'|| #toggleMapping('Order__c', 'Phase__c')# As orderPhaseImage,  ";
    sqlStmt += "Order__c._syncStatus AS syncStatus ";
    sqlStmt += "FROM Order__c, User as Responsible, User as Initiator, Account, Substitution__c AS SubMain, Substitution__c AS SubBpaRel, Order_Template__c ";
    sqlStmt += "LEFT JOIN Account_Extension__c ON Account_Extension__c.Account__c = Order__c.Order_Account__c ";
    sqlStmt += "WHERE Order__c.Responsible__c = Responsible.Id ";
    sqlStmt += "AND Order__c.CreatedById = Initiator.Id ";
    sqlStmt += "AND Order__c.Order_Account__c = Account.Id ";
    sqlStmt += "AND SubMain.Active__c = '1' AND SubBpaRel.Active__c = '1' AND SubBpaRel.Substitution__c = SubMain.Id ";
    sqlStmt += "AND SubMain.Sales_Org__c = '#SALESORG#' ";
    sqlStmt += "AND SubBpaRel.Account__c = Order__c.Order_Account__c and SubBpaRel.Substitute__c = '#UserPKey#' ";
    sqlStmt += "AND Order__c.Responsible__c = SubMain.Substituted__c ";
    sqlStmt += "AND Order__c.Order_Template__c = Order_Template__c.Id ";
    sqlStmt += "AND Not Order__c.Phase__c = 'Canceled' "; 
    sqlStmt += "AND SubBpaRel.Valid_From__c - SubMain.Lead_Time__c * 86400 <= #TodayAsDate# ";
    sqlStmt += "AND SubBpaRel.Valid_Thru__c + SubMain.Follow_Up_Time__c * 86400 >= #TodayAsDate# ";
    sqlStmt += "AND SubMain.Valid_From__c - SubMain.Lead_Time__c * 86400 <= #TodayAsDate# ";
    sqlStmt += "AND SubMain.Valid_Thru__c + SubMain.Follow_Up_Time__c * 86400 >= #TodayAsDate# ";

    sqlStmt += condCallCustomer;
    sqlStmt += addCondSearch;

    sqlStmt += "ORDER BY Order__c.Order_Date__c DESC, Order__c.Order_Id__c DESC "

    return Utils.replaceMacrosParam(sqlStmt, sqlParams);

   ]]></Load>
    <Update><![CDATA[
      // Intended to be empty - Overview list => read only!
      return undefined;
   ]]></Update>
    <Insert><![CDATA[
      // Intended to be empty - Overview list => read only!
      return undefined;     
   ]]></Insert>
    <Delete><![CDATA[
      // Intended to be empty - Overview list => read only!
      return undefined;
   ]]></Delete>
  </Database>
</Datasource>